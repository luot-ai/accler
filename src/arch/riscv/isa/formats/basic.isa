// -*- mode:c++ -*-

// Copyright (c) 2015 RISC-V Foundation
// Copyright (c) 2016 The University of Virginia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Basic instruction class declaration template.
def template BasicDeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);
        Fault execute(ExecContext *, trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

// Basic instruction class constructor template.
def template BasicConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
    }
}};


// Basic instruction class execute method template.
def template BasicExecute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        %(op_decl)s;
        %(op_rd)s;
        %(code)s;
        %(op_wb)s;
        return NoFault;
    }
}};

def template BasicVADeclare {{
    //
    // Static instruction class for "%(mnemonic)s".
    //
    class %(class_name)s : public %(base_class)s
    {
      private:
        %(reg_idx_arr_decl)s;

      public:
        /// Constructor.
        %(class_name)s(ExtMachInst machInst);
        Fault execute(ExecContext *, trace::InstRecord *) const override;
        using %(base_class)s::generateDisassembly;
    };
}};

def template BasicVAConstructor {{
    %(class_name)s::%(class_name)s(ExtMachInst machInst)
        : %(base_class)s("%(mnemonic)s", machInst, %(op_class)s)
    {
        %(set_reg_idx_arr)s;
        %(constructor)s;
    }
}};

def template BasicVA2Execute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        RegIndex idx1;
        RegIndex idx2;
        %(idx_code)s;

        CRegVal CV_res1 ={};
        CRegVal CV_res2 ={};
        CRegVal CV_tmp1 ={};
        CRegVal CV_tmp2 ={};
        CRegVal CV_src1 ={};
        CRegVal CV_src2 ={};
        CRegVal CV_msrc1 ={};
        CRegVal CV_msrc2 ={};

        CV_src1 = xc->getCRegOperand(this,idx1);
        CV_src2 = xc->getCRegOperand(this,idx2);
        CV_msrc1 = xc->getCRegOperand(this,idx1+4);
        CV_msrc2 = xc->getCRegOperand(this,idx2+4);
        for (int i = 0; i < 4; i++) {
            %(cal_code)s;
        }

        CV_res1[0]=(CV_tmp1[0]-CV_tmp1[2])*CV_msrc1[0];
        CV_res1[1]=(CV_tmp1[1]+CV_tmp1[2])*CV_msrc1[1];
        CV_res1[2]=(-CV_tmp1[1]+CV_tmp1[2])*CV_msrc1[2];
        CV_res1[3]=(CV_tmp1[1]-CV_tmp1[3])*CV_msrc1[3];
        
        xc->setCRegOperand(this,idx1,CV_res1);
        //if(idx1==1 && idx2==2){
        //        CV_res2[0]=(CV_tmp2[0]-CV_tmp2[2])*CV_msrc2[0];
        //        CV_res2[1]=(CV_tmp2[1]+CV_tmp2[2])*CV_msrc2[1];
        //        CV_res2[2]=(-CV_tmp2[1]+CV_tmp2[2])*CV_msrc2[2];
        //        CV_res2[3]=(CV_tmp2[1]-CV_tmp2[3])*CV_msrc2[3];
        //    xc->setCRegOperand(this,idx2,CV_res2);
        //}
        return NoFault;
    }
}};

def template BasicVA3Execute {{
    Fault
    %(class_name)s::execute(ExecContext *xc,
        trace::InstRecord *traceData) const
    {
        RegIndex idx1;
        RegIndex idx2;
        RegIndex idx3;
        %(idx_code)s;

        CRegVal CV_res ={};
        CRegVal CV_src1 ={};
        CRegVal CV_src2 ={};
        CRegVal CV_src3 ={};

        CV_src1 = xc->getCRegOperand(this,idx1);
        CV_src2 = xc->getCRegOperand(this,idx2);
        CV_src3 = xc->getCRegOperand(this,idx3);

        %(cal_code)s;
        
        xc->setCRegOperand(this,idx1,CV_res);
        return NoFault;
    }
}};


// Basic decode template.
def template BasicDecode {{
    return new %(class_name)s(machInst);
}};

// The most basic instruction format...
def format BasicOp(code, *flags) {{
    iop = InstObjParams(name, Name, 'RiscvStaticInst', code, flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};
